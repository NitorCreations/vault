name: Integration Tests

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - "**/README.md"
  pull_request:
    paths-ignore:
      - "**/README.md"

permissions:
  id-token: write
  contents: read

# Cancel previous runs for PRs but not pushes to main
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  build-go:
    name: Build Go
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: go
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.21.0"
          cache-dependency-path: go/go.sum

      - name: Run build script
        run: "./build.sh"

      - name: Upload Go binary
        uses: actions/upload-artifact@v4
        with:
          name: go
          path: go/vault

  build-rust:
    name: Build Rust and Python wheel
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2.8.0
        with:
          # The build script creates a `release` build so use separate cache
          key: "release"

      - name: Run build script
        run: "./build.sh"
        working-directory: rust

      - name: Upload Rust binary
        uses: actions/upload-artifact@v4
        with:
          name: rust
          path: rust/vault

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          args: |
            --release
            --out dist
            --find-interpreter
            --manifest-path python-pyo3/Cargo.toml

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel
          path: dist

  tests:
    needs: [build-go, build-rust]
    runs-on: ubuntu-latest
    env:
      # VAULT_STACK overwrites default 'vault' for vaults
      VAULT_STACK: nitor-vault-integration-testing
    # at the moment we store to the values to fixed keys so this needs to have limited concurrency
    concurrency: "integration-test"
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CI_ROLE }}
          role-session-name: GitHubVaultIntegrationTests
          aws-region: eu-west-1

      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: bin

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: nodejs/pnpm-lock.yaml

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          cache: pip

      - name: Install zip
        run: sudo apt-get install zip unzip

      - name: Build node vault
        run: pnpm install --frozen-lockfile && pnpm build
        working-directory: nodejs

      - name: Install Python PyO3 vault from wheel
        run: python -m pip install $(find bin -name '*.whl')

      - name: Add execute permissions
        run: chmod +x bin/go/vault bin/rust/vault nodejs/dist/cli/vault.js

      - name: Check versions
        run: |
          vault --version
          bin/go/vault --version
          bin/rust/vault --version
          nodejs/dist/cli/vault.js --version

      - name: Check help output
        run: |
          echo "============================== Python Vault CLI =============================="
          vault -h
          echo "------------------------------------------------------------------------------"

          echo "================================= Go Vault CLI ==============================="
          bin/go/vault --help
          echo "------------------------------------------------------------------------------"

          echo "================================ Rust Vault CLI =============================="
          bin/rust/vault -h
          echo "------------------------------------------------------------------------------"

          echo "=============================== Node.js Vault CLI ============================"
          nodejs/dist/cli/vault.js --help

        ######## CLI TESTS ########

      - name: Check stack status with Rust CLI
        run: bin/rust/vault stack

      - name: Delete all secrets with Rust
        run: tests/delete_all.sh bin/rust/vault

      - name: Store secret with Python
        run: tests/store.sh vault secret-python "sha-${{github.sha}}"

      - name: Store secret with Go
        run: tests/store.sh bin/go/vault secret-go "sha-${{github.sha}}"

      - name: Store secret with Rust
        run: tests/store.sh bin/rust/vault secret-rust "sha-${{github.sha}}"

      - name: Store secret with Node.js
        run: tests/store.sh nodejs/dist/cli/vault.js secret-nodejs "sha-${{github.sha}}"

      - name: Lookup secret with Python
        run: tests/lookup.sh vault secret-python "sha-${{github.sha}}"

      - name: Lookup secret with Go
        run: tests/lookup.sh bin/go/vault secret-go "sha-${{github.sha}}"

      - name: Lookup secret with Rust
        run: tests/lookup.sh bin/rust/vault secret-rust "sha-${{github.sha}}"

      - name: Lookup secret with Node.js
        run: tests/lookup.sh nodejs/dist/cli/vault.js secret-nodejs "sha-${{github.sha}}"

      - name: Validate storing worked
        run: tests/validate.sh

      - name: List secrets with Rust
        run: bin/rust/vault all

      - name: Delete secret with Python
        run: tests/delete.sh vault secret-python

      - name: Delete secret with Go
        run: tests/delete.sh bin/go/vault secret-go

      - name: Delete secret with Rust
        run: tests/delete.sh bin/rust/vault secret-rust

      - name: Delete secret with Node.js
        run: tests/delete.sh nodejs/dist/cli/vault.js secret-nodejs

      - name: List secrets with Rust
        run: bin/rust/vault all

      - name: Verify that 'secret-python' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-python

      - name: Verify that 'secret-go' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-go

      - name: Verify that 'secret-rust' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-rust

      - name: Verify that 'secret-nodejs' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-nodejs

      ######## CLI BINARY FILE TESTS ########

      - name: Create dummy text file
        run: echo "Vault test ${{ github.sha }} ${{ github.ref_name }}" > test.txt

      - name: Zip the text file
        run: zip "secret-${{github.sha}}.zip" test.txt

      - name: Store zip file using Python
        run: vault --store --file "secret-${{github.sha}}.zip"

      - name: Store zip file using Python overwrite
        run: vault store --overwrite --file "secret-${{github.sha}}.zip"

      - name: Lookup the stored zip file and write to output
        run: vault -l "secret-${{github.sha}}.zip" > output-python.zip

      - name: Extract the retrieved zip file
        run: unzip output-python.zip -d extracted-python

      - name: Verify the extracted file content
        run: diff extracted-python/test.txt test.txt

      - name: Delete secret with Python
        run: vault -d "secret-${{github.sha}}.zip"

      - name: Verify that key has been deleted with Rust
        run: bin/rust/vault exists secret-${{github.sha}}.zip | grep -q "does not exist"

      - name: Store zip file using Rust vault
        run: bin/rust/vault --store --file "secret-${{github.sha}}.zip"

      - name: Lookup the stored zip file and write to output
        run: bin/rust/vault -l "secret-${{github.sha}}.zip" > output-rust.zip

      - name: Extract the retrieved zip file
        run: unzip output-rust.zip -d extracted-rust

      - name: Verify the extracted file content
        run: diff extracted-rust/test.txt test.txt

      - name: Delete secret with Rust
        run: bin/rust/vault -d "secret-${{github.sha}}.zip"

      - name: Verify that 'secret-python' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-python

      - name: Verify that 'secret-go' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-go

      - name: Verify that 'secret-rust' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-rust

      - name: Verify that 'secret-nodejs' key has been deleted
        run: tests/does_not_exist.sh bin/rust/vault secret-nodejs

      ######## PYTHON LIBRARY TESTS ########

      - name: Check Python vault package
        run: python -m pip show nitor-vault

      - name: Check stack status with Python library
        run: python -c "from n_vault import Vault; print(Vault().stack_status())"

      - name: Store secret using Python library
        run: |
          python -c "from n_vault import Vault; Vault().store('secret-python-library', 'sha-${{github.sha}}')"

      - name: Verify secret using Python library
        run: |
          python -c "from n_vault import Vault; print('true') if Vault().exists('secret-python-library') else print('false')" | grep -q "true"

      - name: Validate storing worked with Rust
        run: diff <(bin/rust/vault -l secret-python-library) <(echo -n sha-${{github.sha}})

      - name: Lookup with Python library
        run: |
          diff <(python -c "from n_vault import Vault; print(Vault().lookup('secret-python-library').decode('utf-8'), end='', flush=True)") <(echo -n sha-${{github.sha}})

      - name: List secrets with Rust
        run: bin/rust/vault all

      - name: List secrets with Python library
        run: |
          python -c "from n_vault import Vault; print('\n'.join(Vault().list_all()))" | wc -l | grep -q "1"

      - name: Delete with Python library
        run: python -c "from n_vault import Vault; Vault().delete('secret-python-library')"

      - name: Verify that key has been deleted with Rust
        run: bin/rust/vault exists secret-python-library | grep -q "key 'secret-python-library' does not exist"

      - name: Store secret with Go
        run: bin/go/vault -s 'secret-go' -v 'sha-${{github.sha}}' -w

      - name: Store secret with Rust
        run: bin/rust/vault -s 'secret-rust' -v 'sha-${{github.sha}}' -w

      - name: Store secret with Nodejs
        run: nodejs/dist/cli/vault.js s 'secret-nodejs' 'sha-${{github.sha}}' -w

      - name: List secrets with Python library
        run: |
          python -c "from n_vault import Vault; print('\n'.join(Vault().list_all()))" | wc -l | grep -q "3"

      - name: List secrets with Rust
        run: bin/rust/vault all

      - name: Delete all keys with Python library
        run: python -c "from n_vault import Vault; Vault().delete_many(Vault().list_all())"

      - name: List secrets with Rust
        run: bin/rust/vault all

      - name: Verify that 'secret-python' key has been deleted
        run: tests/does_not_exist.sh vault secret-python

      - name: Verify that 'secret-go' key has been deleted
        run: tests/does_not_exist.sh vault secret-go

      - name: Verify that 'secret-rust' key has been deleted
        run: tests/does_not_exist.sh vault secret-rust

      - name: Verify that 'secret-nodejs' key has been deleted
        run: tests/does_not_exist.sh vault secret-nodejs
