# This file is autogenerated by maturin v1.7.8
# To update, run
#
#    maturin generate-ci github --output ../.github/workflows/python-wheel.yml
#
name: Python wheel

on:
  push:
    branches:
      - main
      - master
    paths:
      - ".github/workflows/python-wheel.yml"
      - "Cargo.lock"
      - "Cargo.toml"
      - "python-pyo3/Cargo.toml"
      - "python-pyo3/src/lib.rs"
    tags:
      - "python-*"
  pull_request:
    paths:
      - ".github/workflows/python-wheel.yml"
      - "Cargo.lock"
      - "Cargo.toml"
      - "python-pyo3/Cargo.toml"
      - "python-pyo3/src/lib.rs"
  workflow_dispatch:

permissions:
  contents: read

# Cancel previous runs for PRs but not pushes to main
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: |
            --release
            --out dist
            --find-interpreter
            --manifest-path python-pyo3/Cargo.toml
            --zig
          sccache: false
          manylinux: auto

      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: |
            --release
            --out dist
            --interpreter python3.13t
            --manifest-path python-pyo3/Cargo.toml
            --zig
          sccache: false
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: |
            --release
            --out dist
            --find-interpreter
            --manifest-path python-pyo3/Cargo.toml
          sccache: false
          manylinux: musllinux_1_2
          before-script-linux: "cat /etc/os-release; sudo apt-get update && sudo apt-get install -y libclang1; cargo install --force --locked bindgen-cli"

      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: |
            --release
            --out dist
            --interpreter python3.13t
            --manifest-path python-pyo3/Cargo.toml
          sccache: false
          manylinux: musllinux_1_2
          before-script-linux: "cat /etc/os-release; sudo apt-get update && sudo apt-get install -y libclang1; cargo install --force --locked bindgen-cli"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install NASM
        run: choco install nasm -y

      - name: Add NASM to PATH
        run: |
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: |
            --release
            --out dist
            --find-interpreter
            --manifest-path python-pyo3/Cargo.toml
          sccache: true

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: |
            --release
            --out dist
            --find-interpreter
            --manifest-path python-pyo3/Cargo.toml
          sccache: true

      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: |
            --release
            --out dist
            --interpreter python3.13t
            --manifest-path python-pyo3/Cargo.toml
          sccache: true

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path python-pyo3/Cargo.toml

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/python') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Used to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: python-pyo3

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "python-pyo3/wheels-*/*"

      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/python') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing --verbose wheels-*/*
          working-directory: "python-pyo3"
